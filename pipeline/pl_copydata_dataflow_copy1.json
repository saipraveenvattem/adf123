{
	"name": "pl_copydata_dataflow_copy1",
	"properties": {
		"activities": [
			{
				"name": "getfilenames",
				"type": "GetMetadata",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataset": {
						"referenceName": "csvfilelocation",
						"type": "DatasetReference"
					},
					"fieldList": [
						"childItems"
					],
					"storeSettings": {
						"type": "AzureBlobStorageReadSettings",
						"recursive": true,
						"enablePartitionDiscovery": false
					},
					"formatSettings": {
						"type": "DelimitedTextReadSettings"
					}
				}
			},
			{
				"name": "ForEach",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "getfilenames",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('getfilenames').output.childItems",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "get_filenames",
							"type": "SetVariable",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"variableName": "singlefilename",
								"value": {
									"value": "@item().name",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Switch1",
							"type": "Switch",
							"dependsOn": [
								{
									"activity": "get_filenames",
									"dependencyConditions": [
										"Completed"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"on": {
									"value": "@split(item().name,'.')[0]",
									"type": "Expression"
								},
								"cases": [
									{
										"value": "source",
										"activities": [
											{
												"name": "DF_load_file_sql_copy1",
												"type": "ExecuteDataFlow",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataflow": {
														"referenceName": "DF_load_file_sql_copy1",
														"type": "DataFlowReference",
														"datasetParameters": {
															"source1": {
																"filename": "source.csv"
															},
															"sink1": {
																"tableschema": "dbo",
																"tablename": "source_test1"
															}
														}
													},
													"compute": {
														"coreCount": 8,
														"computeType": "General"
													},
													"traceLevel": "Fine"
												}
											}
										]
									},
									{
										"value": "split",
										"activities": [
											{
												"name": "DF_load_file_sql_",
												"type": "ExecuteDataFlow",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataflow": {
														"referenceName": "DF_load_file_sql_",
														"type": "DataFlowReference",
														"datasetParameters": {
															"source1": {
																"filename": "split.csv"
															},
															"sink1": {
																"tableschema": "dbo",
																"tablename": "split_test"
															}
														}
													},
													"compute": {
														"coreCount": 8,
														"computeType": "General"
													},
													"traceLevel": "Fine"
												}
											}
										]
									}
								]
							}
						}
					]
				}
			}
		],
		"variables": {
			"singlefilename": {
				"type": "String"
			}
		},
		"annotations": []
	}
}